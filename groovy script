Declarative Script
============================================================================================================================

pipeline  {
    options {timestramps ()}
environment {
    cluster name 
    registry
    ekr registry
    region
    s3 bucket
    CI= true
    app= myapp
    BRANCH_NAME
    build number
    scannerHome = tool 'SonarQubeScanner'
-------------------

agent any
tools { 
maven 'Maven 3.3.9' 
jdk 'jdk8' 
}

----------------------
    stages {
        
        stage('Cloning Git') {
            steps {
                git 'https://github.com/jfcb853/aws-jenkins-pipeline-v4.git'


-----------------------------

trigger the     {
cron (H * * * *)

}


---------------------



    }
    stages {
        stage ('Initialize') {
            steps {
                sh '''
                    echo "PATH = ${PATH}"
                    echo "M2_HOME = ${M2_HOME}"
                ''' 
------------------

        stage ('test') {
            steps {
                sh 'mvn -Dmaven.test.failure.ignore=true install'

------------------------------------
     stage('SonarCloud') {
  environment {
    SCANNER_HOME = tool 'SonarQubeScanner'
    ORGANIZATION = "igorstojanovski-github"
    PROJECT_NAME = "igorstojanovski_jenkins-pipeline-as-code"
  }
  steps {
    withSonarQubeEnv('SonarCloudOne') {
        sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.organization=$ORGANIZATION \
        -Dsonar.java.binaries=build/classes/java/ \
        -Dsonar.projectKey=$PROJECT_NAME \
        -Dsonar.sources=.'''
    }
  }
}
     
     
--------------------------    
     
     
     stage('Sonarqube') {
    environment {
        scannerHome = tool 'SonarQubeScanner'
    }
    steps {
        withSonarQubeEnv('sonarqube') {
            sh "${scannerHome}/bin/sonar-scanner"
        }
        timeout(time: 10, unit: 'MINUTES') {
            waitForQualityGate abortPipeline: true
        }
    }
      
      
      
      
      
      stage('build && SonarQube analysis') {
            steps {
                withSonarQubeEnv('My SonarQube Server') {
                    // Optionally use a Maven environment you've configured already
                    withMaven(maven:'Maven 3.5') {
                        sh 'mvn clean package sonar:sonar'
                    }
                }


 }
        stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                    // true = set pipeline to UNSTABLE, false = don't
                    waitForQualityGate abortPipeline: true
                }
            }



-----------------
        stage('Lint') {
            steps {
                sh 'hadolint Dockerfile'
            }
        }

----------------------

aws ssm get parameter --region $region query parameter value
---------------------------

        stage('Build Image to dockerhub') {
            when {
                branch 'master'
            }
            steps {
                echo 'build the image tagging'
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD']]){
					sh '''
                        docker build -t $registry:$BUILD_NUMBER .

 --------------------------------

         stage('Dev branches:Build and deploy to EKR') {
            when {
                not { branch 'master' }
            }
            steps {
				withAWS(credentials: 'aws-credentials', region: 'us-west-2') {
                    echo 'Login first'
                    sh 'aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin $ekr_registry'
                    echo 'Build the image to EKR'
                    sh 'docker build -t eks-webapp:$BRANCH_NAME.$BUILD_NUMBER .'
                    echo 'Tagging the image'
                    sh 'docker tag eks-webapp:$BRANCH_NAME.$BUILD_NUMBER $ekr_registry/eks-webapp:$BRANCH_NAME.$BUILD_NUMBER'
                    echo 'Push the image to EKR repo'
                    sh 'docker push 156823553040.dkr.ecr.us-west-2.amazonaws.com/eks-webapp:$BRANCH_NAME.$BUILD_NUMBER'
                }


------------------------------------------                       
        stage('Get the cluster kube config') {
			when {
                branch 'master'
            }
            steps {
				withAWS(credentials: 'aws-credentials', region: 'us-west-2') {
					sh '''
						aws eks --region $region update-kubeconfig --name $cluster_name
						ls ~/.kube/config
                        cat ~/.kube/config
                        kubectl get svc
---------------------------------------------------------------------
        stage('Deploy to K8s') {
			when {
                branch 'master'
            }
            steps {
				withAWS(credentials: 'aws-credentials', region: 'us-west-2') {
					sh "sed -i 's/latest/${env.BUILD_NUMBER}/g' ./eks/deployment.yaml" 
                    sh '''
                        grep image ./eks/deployment.yaml
                        kubectl apply -f ./eks/deployment.yaml
						sleep 2
                        kubectl get deployments

----------------------------------------------------------------------
        stage('Service to K8s') {
			when {
                branch 'master'
            }
            steps {
				withAWS(credentials: 'aws-credentials', region: 'us-west-2') {
                    sh '''
                        kubectl get pods -l 'app=my-app' -o wide | awk {'print $1" " $3 " " $6'} | column -t
                        kubectl get deployments
                        kubectl apply -f ./eks/service.yaml
                        kubectl get services

--------------------------------------------------------------------------------

        stage('Wait user check the app ') {
            when {
                branch 'master'
            }
            steps {
                input message: 'Checking your web site is ok? (Click "Proceed" to continue)'
            }


----------------------------------------------------------------------------

		stage('Removing image locally') {
			when {
                branch 'master'
            }
            steps{
                sh "docker rmi $registry:$BUILD_NUMBER"
            }
		}

------------------------------------------------------------

    }

    post {
        always {
            echo 'Pipeline finished'
        }
    }
}

------------------------------------



            }
            post {
                success {
                    junit 'target/surefire-reports/**/*.xml' 
                }


}
























=======================================================================================================================================
pipeline{
    agent any
    stages{
        stage("welocme to the jenkins"){
            steps{
                echo "welocme to the jenkins decalarative pipeline"
            }
        }
        stage("welocme to the world"){
            steps{
                echo "welocme to the jenkins decalarative pipeline"
            }
        }
    }
} 

============================================================================================================================
Checkout SCM
============================================================================================================================
pipeline{
    agent any
    stages{
        stage("git cehcekout"){
            steps{
                git credentialsId: 'github', url: 'https://github.com/vuluchalasarathbabu/python.git'
            }
        }
    }
    
}

===========================================================================================================================
